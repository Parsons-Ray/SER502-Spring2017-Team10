grammar ten;
program : stmt_list ;
stmt_list : stmt ';' stmt_list | stmt ';' ;
stmt : decl_stmt | assign_stmt | if_stmt | for_stmt | print_stmt | ;
decl_stmt : 'var' ID ;
assign_stmt : ID 'is' expr ;
if_stmt : 'if' '(' boolean_expr ')' 'then' '{' stmt_list '}' | 
          'if' '(' boolean_expr ')' 'then' '{' stmt_list '}' 'else' '{' stmt_list '}' ;
for_stmt : 'for' ID 'from' expr 'to' expr 'step' expr '{' stmt_list '}' ;
print_stmt : 'print' expr ;
boolean_expr : expr '=' expr | expr '<>' expr |
               expr '<' expr | expr '<=' expr | 
               expr '>' expr | expr '>=' expr | 
               boolean_val ;
boolean_val : 'true' | 'false' ;
expr : term res1;
res1 : '+' term res1 | '-' term res1 | ;
term : factor res2;
res2 : '*' factor res2 | '/' factor res2 | '%' factor res2 |  ;
factor : '(' expr ')' | NUMBER | ID ;
NUMBER : [0-9]+ ;
ID : [a-z|A-Z]+ ;
WS : [ \t\r\n]+ -> skip ;